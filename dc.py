import logging
import random
import os
import psycopg2
import datetime
import sys
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from telegram.constants import ChatType
from telegram.error import Forbidden

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- BAZA V∆è ∆èSAS D∆èYƒ∞≈û∆èNL∆èR ---
DATABASE_URL = os.environ.get("DATABASE_URL")
TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_OWNER_ID = int(os.environ.get("BOT_OWNER_ID", 0))

# --- "ƒ∞Kƒ∞ D√úZ, Bƒ∞R YALAN" OYUNU √ú√á√úN M∆èRH∆èL∆èL∆èR ---
STATEMENT_1, STATEMENT_2, STATEMENT_3, WHICH_IS_LIE = range(4)

# --- T∆èHL√úK∆èSƒ∞ZLƒ∞K YOXLAMASI ---
def run_pre_flight_checks():
    if not DATABASE_URL or not TOKEN:
        print("--- X∆èTA ---"); print("DATABASE_URL v…ô ya TELEGRAM_TOKEN tapƒ±lmadƒ±."); sys.exit(1)
    print("B√ºt√ºn konfiqurasiya d…ôyi≈ü…ônl…ôri m√∂vcuddur. Bot ba≈üladƒ±lƒ±r...")

# --- BAZA FUNKSƒ∞YASI ---
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS message_counts (id SERIAL PRIMARY KEY, chat_id BIGINT NOT NULL, user_id BIGINT NOT NULL, username TEXT NOT NULL, message_timestamp TIMESTAMPTZ NOT NULL );")
        cur.execute("CREATE TABLE IF NOT EXISTS bot_users (user_id BIGINT PRIMARY KEY, first_name TEXT, date_added TIMESTAMPTZ NOT NULL);")
        cur.execute("CREATE TABLE IF NOT EXISTS active_chats (chat_id BIGINT PRIMARY KEY, chat_title TEXT, date_added TIMESTAMPTZ NOT NULL);")
        conn.commit(); cur.close(); conn.close()
        print("Veril…ônl…ôr bazasƒ± c…ôdv…ôli hazƒ±rdƒ±r.")
    except Exception as e:
        print(f"Baza yaradƒ±lark…ôn x…ôta: {e}")

# --- M∆èZMUN Sƒ∞YAHILARI ---
STORY_DATA = { 'start_temple': {'text': "Siz q…ôdim v…ô unudulmu≈ü bir m…ôb…ôdin giri≈üind…ô dayanmƒ±sƒ±nƒ±z...", 'choices': [{'text': "üìö ƒ∞√ß…ôrid…ôki kitabxanaya ke√ß", 'goto': 'temple_library'}, {'text': "üóùÔ∏è Baƒülƒ± qapƒ±nƒ± yoxla", 'goto': 'temple_locked_door'}]}, 'temple_library': {'text': "Tozlu kitabxanaya daxil olursunuz...", 'get_item': 'k√∂hn…ô kitab', 'choices': [{'text': "Kitabƒ± oxu", 'goto': 'read_book'}, {'text': "Qapƒ±ya t…ôr…ôf qayƒ±t", 'goto': 'temple_locked_door'}]}, 'read_book': {'text': "Kitabƒ± v…ôr…ôql…ôyirsiniz. ƒ∞√ßind…ô yazƒ±lƒ±b: 'G√∂z…ôt√ßi yalnƒ±z doƒüru s√∂zl…ôri dey…ôn…ô yol ver…ôr.'...", 'choices': [{'text': "Qapƒ±ya get", 'goto': 'temple_locked_door'}]}, 'temple_locked_door': {'text': "B√∂y√ºk bir da≈ü qapƒ±nƒ±n qar≈üƒ±sƒ±ndasƒ±nƒ±z...", 'choices': [{'text': "Parolu de ('ƒ∞≈üƒ±q')", 'goto': 'guardian_chamber', 'requires_item': 'k√∂hn…ô kitab'}, {'text': "Qapƒ±nƒ± g√ºcl…ô a√ßmaƒüa √ßalƒ±≈ü", 'goto': 'fail_door'}]}, 'fail_door': {'text': "Qapƒ±nƒ± it…ôl…ôm…ôy…ô √ßalƒ±≈üsanƒ±z da, yerind…ôn t…ôrp…ônmir...", 'choices': []}, 'guardian_chamber': {'text': "Qapƒ± a√ßƒ±lƒ±r. ƒ∞√ß…ôrid…ô 'Daƒüƒ±n √úr…ôyi' almazƒ±nƒ± qoruyan bir G√∂z…ôt√ßi dayanƒ±r...", 'choices': [{'text': "Cavab: 'N…ôf…ôs'", 'goto': 'win_temple'}, {'text': "Cavab: 'X…ôyal'", 'goto': 'fail_guardian'}]}, 'fail_guardian': {'text': "G√∂z…ôt√ßi 'S…ôhv cavab!' dey…ôr…ôk sizi m…ôb…ôdd…ôn √ß√∂l…ô atƒ±r...", 'choices': []}, 'win_temple': {'text': "G√∂z…ôt√ßi g√ºl√ºms…ôyir: 'Doƒürudur'. O, k…ônara √ß…ôkilir v…ô siz 'Daƒüƒ±n √úr…ôyi' almazƒ±nƒ± g√∂t√ºr√ºrs√ºn√ºz...", 'choices': []}, 'start_shipwreck': {'text': "Fƒ±rtƒ±nalƒ± bir gec…ôd…ôn sonra nam…ôlum bir adanƒ±n sahilind…ô oyanƒ±rsƒ±nƒ±z...", 'choices': [{'text': "üèùÔ∏è Sahili ara≈üdƒ±r", 'goto': 'explore_beach'}, {'text': "üå≥ C…ông…ôlliy…ô daxil ol", 'goto': 'enter_jungle'}]}, 'explore_beach': {'text': "Sahili ara≈üdƒ±rark…ôn qumun i√ßind…ô k√∂hn…ô bir butulka tapƒ±rsƒ±nƒ±z...", 'get_item': 'x…ôrit…ô par√ßasƒ± 1', 'get_item_2': 'm√∂hk…ôm taxta', 'choices': [{'text': "C…ông…ôlliy…ô daxil ol", 'goto': 'enter_jungle'}]}, 'enter_jungle': {'text': "Sƒ±x c…ông…ôlliy…ô daxil olursunuz. Qar≈üƒ±nƒ±za timsahlarla dolu bir √ßay √ßƒ±xƒ±r.",'choices': [{'text': "üõ∂ Sal d√ºz…ôlt", 'goto': 'build_raft', 'requires_item': 'm√∂hk…ôm taxta'}, {'text': "üèä‚Äç‚ôÇÔ∏è √úz…ôr…ôk ke√ßm…ôy…ô √ßalƒ±≈ü", 'goto': 'swim_fail'}, {'text': "Geri qayƒ±t", 'goto': 'start_shipwreck'}]}, 'swim_fail': {'text': "√áayƒ± √ºz…ôr…ôk ke√ßm…ôy…ô √ßalƒ±≈üƒ±rsƒ±nƒ±z, lakin timsahlar sizi tutur...", 'choices': []}, 'build_raft': {'text': "M√∂hk…ôm taxta par√ßasƒ±ndan istifad…ô ed…ôr…ôk ki√ßik bir sal d√ºz…ôldirsiniz...", 'choices': [{'text': "Daxmanƒ± ara≈üdƒ±r", 'goto': 'explore_hut'}]}, 'explore_hut': {'text': "K√∂hn…ô daxmanƒ±n i√ßind…ô bir sandƒ±q tapƒ±rsƒ±nƒ±z...", 'get_item': 'x…ôrit…ô par√ßasƒ± 2', 'choices': [{'text': "X…ôrit…ôni birl…ô≈üdir", 'goto': 'map_complete'}]}, 'map_complete': {'text': "X…ôrit…ônin iki par√ßasƒ±nƒ± birl…ô≈üdirirsiniz. X…ôzin…ôni tapƒ±rsƒ±nƒ±z...", 'choices': []}}
QUIZ_QUESTIONS = [{'question': 'Az…ôrbaycanƒ±n paytaxtƒ± haradƒ±r?', 'options': ['G…ônc…ô', 'Sumqayƒ±t', 'Bakƒ±', 'Nax√ßƒ±van'], 'correct': 'Bakƒ±'}]
RIDDLES = [{'riddle': 'Aƒüzƒ± var, dili yox, danƒ±≈üdƒ±qca cana g…ôlir. Bu n…ôdir?', 'answers': ['kitab']}]
NORMAL_TRUTH_QUESTIONS = ["U≈üaqlƒ±qda …ôn b√∂y√ºk qorxun n…ô idi?"]
NORMAL_DARE_TASKS = ["Profil ≈ü…ôklini 1 saatlƒ±q qrupdakƒ± …ôn son g√∂nd…ôril…ôn ≈ü…ôkil il…ô d…ôyi≈üdir."]
RULES_TEXT = "üìú **Oyun Botunun Qaydalarƒ±** üìú\n\n(Bura qaydalar m…ôtni daxil edil…ôc…ôk...)"
ABOUT_TEXT = "ü§ñ **Bot Haqqƒ±nda M…ôlumat** ü§ñ\n\n(Bura bot haqqƒ±nda m…ôlumat m…ôtni daxil edil…ôc…ôk...)"

# --- ∆èSAS FUNKSƒ∞YALAR ---
def get_rank_title(count: int) -> str:
    if count <= 100: return "Yeni √úzv üë∂"
    elif count <= 500: return "Daimi Sakin üë®‚Äçüíª"
    # ... (dig…ôr r√ºtb…ôl…ôr)
    else: return "S√∂hb…ôt Tanrƒ±sƒ± ‚ö°Ô∏è"
async def welcome_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def is_user_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    # ... (kod eyni qalƒ±r)
    pass
async def ask_next_player(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
# --- ∆èSAS ∆èMRL∆èR ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def qaydalar_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def haqqinda_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def macera_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def show_rpg_node(update: Update, context: ContextTypes.DEFAULT_TYPE, node_key: str):
    # ... (kod eyni qalƒ±r)
    pass
async def game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def start_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def next_turn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def stop_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def leave_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def tapmaca_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def viktorina_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def my_rank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (kod eyni qalƒ±r)
    pass

# --- MAIN FUNKSƒ∞YASI ---
def main() -> None:
    run_pre_flight_checks()
    init_db()
    
    application = Application.builder().token(TOKEN).build()
    
    group_filter = ~filters.ChatType.PRIVATE
    private_filter = filters.ChatType.PRIVATE
    
    # ... (B√ºt√ºn CommandHandler v…ô dig…ôr handler-l…ôr burada …ôlav…ô olunur)

    print("Bot i≈ü…ô d√º≈üd√º...")
    application.run_polling()

if __name__ == '__main__':
    main()
