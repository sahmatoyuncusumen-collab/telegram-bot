import logging
import random
import os
import psycopg2
import datetime
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PollHandler
from telegram.constants import ChatType

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- BAZA V∆è ∆èSAS D∆èYƒ∞≈û∆èNL∆èR ---
DATABASE_URL = os.environ.get("DATABASE_URL")
TOKEN = os.environ.get("TELEGRAM_TOKEN")

# ... (init_db, sual siyahƒ±larƒ±, get_rank_title v…ô s. k√∂hn…ô funksiyalar olduƒüu kimi qalƒ±r)

# --- YENƒ∞L∆èNMƒ∞≈û MAC∆èRA HEKAY∆èSƒ∞ (ƒ∞nventar il…ô) ---
STORY_DATA = {
    'start': {
        'text': "Siz q…ôdim bir m…ôb…ôdin giri≈üind…ô dayanmƒ±sƒ±nƒ±z. Hava qaralƒ±r. ƒ∞ki yol var: soldakƒ± mamƒ±rlƒ± da≈ülarla √∂rt√ºlm√º≈ü cƒ±ƒüƒ±r v…ô saƒüdakƒ± qaranlƒ±q maƒüara giri≈üi. Qrup olaraq q…ôrar verin:",
        'choices': [
            {'text': "üå≥ Sol cƒ±ƒüƒ±rla ged…ôk", 'goto': 'forest_path'},
            {'text': "ü¶á Maƒüaraya daxil olaq", 'goto': 'cave_entrance'}
        ]
    },
    'forest_path': {
        'text': "Cƒ±ƒüƒ±rla ir…ôlil…ôy…ôr…ôk √ºz…ôrind…ô q…ôdim i≈üar…ôl…ôr olan b√∂y√ºk bir da≈ü qapƒ±ya √ßatƒ±rsƒ±nƒ±z. Qapƒ± baƒülƒ±dƒ±r v…ô ortasƒ±nda b√∂y√ºk bir a√ßar yeri var. N…ô edirsiniz?",
        'choices': [
            {'text': "üîë Q…ôdim a√ßarƒ± istifad…ô ed…ôk", 'goto': 'open_door', 'requires_item': 'q…ôdim a√ßar'},
            {'text': " geri d√∂n…ôk", 'goto': 'go_back'}
        ]
    },
    'cave_entrance': {
        'text': "Qaranlƒ±q maƒüaraya daxil olursunuz. Divardan asƒ±lmƒ±≈ü k√∂hn…ô bir a√ßar g√∂z√ºn√ºz…ô d…ôyir. Onu g√∂t√ºr√ºrs√ºn√ºz.",
        'get_item': 'q…ôdim a√ßar',
        'choices': [
            {'text': "A√ßarla birlikd…ô geri d√∂n…ôk", 'goto': 'get_key'}
        ]
    },
    'get_key': {
        'text': "Artƒ±q qrupun inventarƒ±nda k√∂hn…ô, paslƒ± bir a√ßar var. Bu, b…ôzi qapƒ±larƒ± a√ßa bil…ôr. ƒ∞ndi hara gedirsiniz?",
        'choices': [
            {'text': "üå≥ Me≈ü…ôd…ôki qapƒ±nƒ± yoxlayaq", 'goto': 'forest_path'},
            {'text': "üß≠ M…ôb…ôdin giri≈üin…ô qayƒ±daq", 'goto': 'start'}
        ]
    },
    'open_door': {
        'text': "A√ßarƒ± istifad…ô edirsiniz. Q…ôdim mexanizm i≈ü…ô d√º≈ü√ºr v…ô da≈ü qapƒ± yava≈üca a√ßƒ±lƒ±r. ƒ∞√ß…ôrid…ô parlayan bir qƒ±lƒ±ncƒ±n olduƒüu x…ôzin…ô otaƒüƒ± g√∂r√ºn√ºr! Qrup olaraq qƒ±lƒ±ncƒ± g√∂t√ºr√ºrs√ºn√ºz.",
        'get_item': '…ôfsan…ôvi qƒ±lƒ±nc',
        'choices': [
            {'text': "‚öîÔ∏è Qƒ±lƒ±ncƒ± g√∂t√ºr…ôk!", 'goto': 'treasure_found'}
        ]
    },
    'treasure_found': {
        'text': "∆èfsan…ôvi qƒ±lƒ±ncƒ± …ôld…ô etdiniz! Mac…ôranƒ±z uƒüurla ba≈üa √ßatdƒ±. Qrup olaraq qalib g…ôldiniz! üèÜ\n\nYeni mac…ôra √º√ß√ºn /macera yazƒ±n.",
        'choices': []
    },
    'go_back': {
        'text': "A√ßarƒ±nƒ±z olmadƒ±ƒüƒ± √º√ß√ºn geri qayƒ±tmaqdan ba≈üqa √ßar…ôniz yoxdur. B…ôlk…ô d…ô ba≈üqa yerd…ô bir ipucu taparsƒ±nƒ±z. M…ôb…ôdin giri≈üin…ô qayƒ±tdƒ±nƒ±z.",
        'choices': [
            {'text': "ü¶á Maƒüaraya daxil olaq", 'goto': 'cave_entrance'}
        ]
    }
}

# --- YENƒ∞ V∆è YENƒ∞L∆èNMƒ∞≈û FUNKSƒ∞YALAR ---

async def show_rpg_node(context: ContextTypes.DEFAULT_TYPE, chat_id: int, node_key: str):
    """Verilmi≈ü hekay…ô d√ºy√ºm√ºn√º (s…ôsverm…ô v…ô m…ôtn) g√∂st…ôrir."""
    node = STORY_DATA.get(node_key)
    if not node: return

    inventory = context.chat_data.get('rpg_inventory', set())
    if node.get('get_item'):
        inventory.add(node['get_item'])
        context.chat_data['rpg_inventory'] = inventory

    text = node['text']
    choices = node['choices']
    
    # ∆èg…ôr hekay…ô bitibs…ô, son mesajƒ± g√∂nd…ôr v…ô bitir
    if not choices:
        await context.bot.send_message(chat_id, text)
        context.chat_data.pop('rpg_inventory', None)
        context.chat_data.pop('active_poll', None)
        return

    # S…ôsverm…ô √º√ß√ºn se√ßiml…ôri hazƒ±rla (inventara g√∂r…ô)
    poll_options = []
    choices_map = {}
    for choice in choices:
        if 'requires_item' in choice:
            if choice['requires_item'] in inventory:
                poll_options.append(choice['text'])
                choices_map[choice['text']] = choice['goto']
        else:
            poll_options.append(choice['text'])
            choices_map[choice['text']] = choice['goto']

    if not poll_options:
        await context.bot.send_message(chat_id, "G√∂r√ºn√ºr, davam etm…ôk √º√ß√ºn doƒüru …ô≈üyanƒ±z yoxdur. M…ôƒülub oldunuz. üòî")
        context.chat_data.pop('rpg_inventory', None)
        return
        
    poll_message = await context.bot.send_poll(
        chat_id=chat_id,
        question=text,
        options=poll_options,
        is_anonymous=False,
        allows_multiple_answers=False,
        open_period=60 # S…ôsverm…ô 60 saniy…ô davam ed…ôc…ôk
    )
    
    # S…ôsverm…ônin n…ôtic…ôsini izl…ôm…ôk √º√ß√ºn m…ôlumatlarƒ± yadda saxlayƒ±rƒ±q
    context.chat_data['active_poll'] = {
        'poll_id': poll_message.poll.id,
        'chat_id': chat_id,
        'choices_map': choices_map
    }

async def macera_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mac…ôra oyununu ba≈üladƒ±r v…ô inventarƒ± sƒ±fƒ±rlayƒ±r."""
    context.chat_data.pop('rpg_inventory', None)
    context.chat_data.pop('active_poll', None)
    await show_rpg_node(context, update.message.chat_id, 'start')

async def receive_poll_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """S…ôsverm…ô bitdikd…ô n…ôtic…ôni emal edir."""
    poll_data = context.chat_data.get('active_poll')
    if not poll_data or update.poll.id != poll_data['poll_id']:
        return

    # S…ôsverm…ônin bitdiyini v…ô n…ôtic…ôl…ôrin olduƒüunu yoxlayƒ±rƒ±q
    if update.poll.is_closed:
        winning_option = None
        max_votes = -1
        
        for option in update.poll.options:
            if option.voter_count > max_votes:
                max_votes = option.voter_count
                winning_option = option.text
        
        # S…ôsverm…ô bitdikd…ôn sonra m…ôlumatlarƒ± t…ômizl…ôyirik
        context.chat_data.pop('active_poll', None)

        if winning_option:
            next_node_key = poll_data['choices_map'].get(winning_option)
            await context.bot.send_message(poll_data['chat_id'], f"üó≥Ô∏è S…ôsverm…ô bitdi! ∆èn √ßox s…ôsi '{winning_option}' se√ßimi topladƒ±. Hekay…ô davam edir...")
            await show_rpg_node(context, poll_data['chat_id'], next_node_key)
        else:
            await context.bot.send_message(poll_data['chat_id'], "He√ß kim s…ôs verm…ôdiyi √º√ß√ºn mac…ôra dayandƒ±rƒ±ldƒ±.")
            context.chat_data.pop('rpg_inventory', None)


# --- B√ºt√ºn D…ôyi≈üiklikl…ôrl…ô Birlikd…ô Tam Kod (BUNU KOPYALAYIN) ---
import logging, random, os, psycopg2, datetime, sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PollHandler
from telegram.constants import ChatType

# ... (yuxarƒ±dakƒ± b√ºt√ºn m…ôzmun v…ô funksiyalar)
def main() -> None:
    run_pre_flight_checks()
    init_db()
    application = Application.builder().token(TOKEN).build()
    group_filter = ~filters.ChatType.PRIVATE
    
    # ∆èmrl…ôr
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("qaydalar", qaydalar_command))
    application.add_handler(CommandHandler("macera", macera_command, filters=group_filter)) # YENƒ∞
    # ... (k√∂hn…ô …ômrl…ôr)

    # Handler-l…ôr
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(PollHandler(receive_poll_update)) # YENƒ∞
    # ... (k√∂hn…ô handler-l…ôr)
    
    print("Bot i≈ü…ô d√º≈üd√º...")
    application.run_polling()

if __name__ == '__main__':
    main()
