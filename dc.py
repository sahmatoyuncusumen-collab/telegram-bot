import logging
import random
import os
import psycopg2
import datetime
import sys
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ChatType, ParseMode
from collections import deque

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- BAZA V∆è ∆èSAS D∆èYƒ∞≈û∆èNL∆èR ---
DATABASE_URL = os.environ.get("DATABASE_URL")
TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_OWNER_ID = 6751376199
ADMIN_USERNAME = "tairhv"

# --- T∆èHL√úK∆èSƒ∞ZLƒ∞K YOXLAMASI ---
def run_pre_flight_checks():
    if not DATABASE_URL or not TOKEN:
        logger.critical("--- X∆èTA ---")
        logger.critical("DATABASE_URL v…ô ya TELEGRAM_TOKEN tapƒ±lmadƒ±. Proqram dayandƒ±rƒ±lƒ±r.")
        sys.exit(1)
    logger.info("B√ºt√ºn konfiqurasiya d…ôyi≈ü…ônl…ôri m√∂vcuddur. Bot ba≈üladƒ±lƒ±r...")

# --- BAZA FUNKSƒ∞YALARI ---
def init_db():
    conn, cur = None, None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS premium_users (user_id BIGINT PRIMARY KEY, added_date TIMESTAMPTZ NOT NULL);")
        cur.execute("""
            CREATE TABLE IF NOT EXISTS quiz_questions (
                id SERIAL PRIMARY KEY,
                question_text TEXT NOT NULL UNIQUE,
                options TEXT[] NOT NULL,
                correct_answer TEXT NOT NULL,
                is_premium BOOLEAN NOT NULL DEFAULT FALSE
            );
        """)
        conn.commit()
        logger.info("Veril…ônl…ôr bazasƒ± c…ôdv…ôll…ôri hazƒ±rdƒ±r.")
    except Exception as e:
        logger.error(f"Baza yaradƒ±lark…ôn x…ôta: {e}")
        sys.exit(1)
    finally:
        if cur: cur.close()
        if conn: conn.close()

def is_user_premium(user_id: int) -> bool:
    # ... (Bu funksiya v…ô dig…ôr baza funksiyalarƒ± …ôvv…ôlki koddakƒ± kimi tam ≈ü…ôkild…ô olmalƒ±dƒ±r)
    pass

def add_premium_user(user_id: int) -> bool:
    # ...
    pass

def remove_premium_user(user_id: int) -> bool:
    # ...
    pass

# --- M∆èZMUN Sƒ∞YAHILARI ---
ABOUT_TEXT = "ü§ñ **Bot Haqqƒ±nda**\n\nM…ôn qruplar √º√ß√ºn n…ôz…ôrd…ô tutulmu≈ü …ôyl…ônc…ô v…ô statistika botuyam."
RULES_TEXT = "üìú **Qrup Qaydalarƒ±**\n\n1. Reklam etm…ôk q…ôti qadaƒüandƒ±r.\n2. T…ôhqir, s√∂y√º≈ü v…ô aqressiv davranƒ±≈ülara icaz…ô verilmir."
SADE_TRUTH_QUESTIONS = ["U≈üaqlƒ±qda …ôn b√∂y√ºk qorxun n…ô olub?"]
SADE_DARE_TASKS = ["Qrupdakƒ± son mesajƒ± …ôlifbanƒ±n h…ôr h…ôrfi il…ô t…ôrsin…ô yaz."]
PREMIUM_TRUTH_QUESTIONS = ["H…ôyatƒ±nƒ±n geri qalanƒ±nƒ± yalnƒ±z bir filmi izl…ôy…ôr…ôk ke√ßirm…ôli olsaydƒ±n, hansƒ± filmi se√ß…ôrdin?"]
PREMIUM_DARE_TASKS = ["Qrupdakƒ± adminl…ôrd…ôn birin…ô 10 d…ôqiq…ôlik \"∆èn yax≈üƒ± admin\" statusu yaz."]

# --- K√ñM∆èK√áƒ∞ FUNKSƒ∞YALAR ---
async def is_user_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if user_id == BOT_OWNER_ID: return True
    if user_id == chat_id: return True
    try:
        chat_admins = await context.bot.get_chat_administrators(chat_id)
        return user_id in [admin.user.id for admin in chat_admins]
    except Exception as e:
        logger.error(f"Admin yoxlanark…ôn x…ôta: {e}")
        return False

# --- ∆èSAS ∆èMRL∆èR ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚ÑπÔ∏è Bot Haqqƒ±nda", callback_data="start_info_about")], [InlineKeyboardButton("üìú Qaydalar", callback_data="start_info_qaydalar")]]
    await update.message.reply_text("Salam! M…ôn Oyun Botuyam. ü§ñ\nMenyudan se√ßin:", reply_markup=InlineKeyboardMarkup(keyboard))
    
async def haqqinda_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text(ABOUT_TEXT, parse_mode='Markdown')
async def qaydalar_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text(RULES_TEXT, parse_mode=ParseMode.MARKDOWN)

# --- OYUN ∆èMRL∆èRƒ∞ ---
async def viktorina_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.chat_data.get('quiz_active'): await update.message.reply_text("Artƒ±q aktiv bir viktorina var!"); return
    context.chat_data['quiz_starter_id'] = update.message.from_user.id
    keyboard = [[InlineKeyboardButton("Viktorina (Sad…ô) üå±", callback_data="viktorina_sade")], [InlineKeyboardButton("Viktorina (Premium) üëë", callback_data="viktorina_premium")]]
    await update.message.reply_text(f"Salam, {update.message.from_user.first_name}! Viktorina n√∂v√ºn√º se√ßin:", reply_markup=InlineKeyboardMarkup(keyboard))
        
async def dcoyun_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id; chat_id = update.message.chat.id
    if update.message.chat.type == ChatType.PRIVATE: await update.message.reply_text("Bu oyunu yalnƒ±z qruplarda oynamaq olar."); return
    if not await is_user_admin(chat_id, user_id, context): await update.message.reply_text("‚õî Bu oyunu yalnƒ±z qrup adminl…ôri ba≈ülada bil…ôr."); return
    if context.chat_data.get('dc_game_active'): await update.message.reply_text("Artƒ±q aktiv bir 'Doƒüruluq yoxsa C…ôsar…ôt?' oyunu var."); return
    context.chat_data['dc_game_starter_id'] = user_id
    keyboard = [[InlineKeyboardButton("Doƒüruluq C…ôsar…ôt (sad…ô)", callback_data="dc_select_sade")], [InlineKeyboardButton("Doƒüruluq C…ôsar…ôt (Premiumüëë)", callback_data="dc_select_premium")]]
    await update.message.reply_text("Doƒüruluq C…ôsar…ôt oyununa xo≈ü g…ôlmisinizüëã", reply_markup=InlineKeyboardMarkup(keyboard))

# ... (Dig…ôr b√ºt√ºn oyun, admin, d√ºym…ô v…ô s. funksiyalarƒ± …ôvv…ôlki tam kodda olduƒüu kimidir) ...
# ... (M…ôn onlarƒ± qƒ±saltdƒ±m ki, bu mesaj √ßox uzun olmasƒ±n, amma siz tam versiyanƒ± istifad…ô edin) ...

# --- ∆èSAS MAIN FUNKSƒ∞YASI ---
async def main() -> None:
    run_pre_flight_checks()
    init_db()
    application = Application.builder().token(TOKEN).build()
    
    commands = [
        BotCommand("start", "∆èsas menyunu a√ßmaq"),
        BotCommand("qaydalar", "Qaydalarƒ± g√∂rm…ôk"),
        BotCommand("haqqinda", "Bot haqqƒ±nda m…ôlumat"),
        BotCommand("viktorina", "Viktorina oyununu ba≈ülatmaq"),
        BotCommand("dcoyun", "Doƒüruluq/C…ôsar…ôt oyununu ba≈ülatmaq (Admin)"),
    ]
    await application.bot.set_my_commands(commands)
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("qaydalar", qaydalar_command))
    application.add_handler(CommandHandler("haqqinda", haqqinda_command))
    application.add_handler(CommandHandler("viktorina", viktorina_command))
    application.add_handler(CommandHandler("dcoyun", dcoyun_command))
    application.add_handler(CommandHandler("addpremium", add_premium_command))
    application.add_handler(CommandHandler("removepremium", remove_premium_command))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("Bot i≈ü…ô d√º≈ü√ºr...")
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
