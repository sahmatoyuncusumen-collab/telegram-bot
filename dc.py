import logging, random, os, psycopg2, datetime, sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ChatType

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# BAZA V∆è ∆èSAS D∆èYƒ∞≈û∆èNL∆èR
DATABASE_URL = os.environ.get("DATABASE_URL")
TOKEN = os.environ.get("TELEGRAM_TOKEN")

# T∆èHL√úK∆èSƒ∞ZLƒ∞K YOXLAMASI
def run_pre_flight_checks():
    if not DATABASE_URL or not TOKEN:
        print("--- X∆èTA ---"); print("DATABASE_URL v…ô ya TELEGRAM_TOKEN tapƒ±lmadƒ±."); sys.exit(1)
    print("B√ºt√ºn konfiqurasiya d…ôyi≈ü…ônl…ôri m√∂vcuddur. Bot ba≈üladƒ±lƒ±r...")

# BAZA FUNKSƒ∞YASI
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS message_counts (id SERIAL PRIMARY KEY, chat_id BIGINT NOT NULL, user_id BIGINT NOT NULL, username TEXT NOT NULL, message_timestamp TIMESTAMPTZ NOT NULL );")
        conn.commit(); cur.close(); conn.close()
        print("Veril…ônl…ôr bazasƒ± c…ôdv…ôli hazƒ±rdƒ±r.")
    except Exception as e:
        print(f"Baza yaradƒ±lark…ôn x…ôta: {e}")

# M∆èZMUN Sƒ∞YAHILARI
ABOUT_TEXT = "ü§ñ **Bot Haqqƒ±nda M…ôlumat** ü§ñ\n\nM…ôn Az…ôrbaycan dilind…ô m√ºxt…ôlif oyunlar t…ôklif ed…ôn bir …ôyl…ônc…ô botuyam.\n\nM…ôniml…ô a≈üaƒüƒ±dakƒ± oyunlarƒ± oynaya bil…ôrsiniz:\n- Doƒüruluq yoxsa C…ôsar…ôt?\n- Tapmaca\n- Viktorina (Quiz)\n- M…ôtn-…ôsaslƒ± Mac…ôra\n\nH…ôm√ßinin, qruplardakƒ± aktivliyi izl…ôy…ôn reytinq sistemim var.\n\n∆èyl…ônc…ôli vaxt ke√ßirm…ôyiniz dil…ôyi il…ô!"
RULES_TEXT = "üìú **Oyun Botunun Qaydalarƒ±** üìú\n\n(Bura b√ºt√ºn oyunlarƒ±n qaydalarƒ± …ôlav…ô edil…ôc…ôk...)"
STORY_DATA = {'start': {'text': "Siz q…ôdim bir m…ôb…ôdin giri≈üind…ô dayanmƒ±sƒ±nƒ±z...", 'choices': [{'text': "üå≥ Sol cƒ±ƒüƒ±rla get", 'goto': 'forest_path'}, {'text': "ü¶á Maƒüaraya daxil ol", 'goto': 'cave_entrance'}]}, 'treasure_found': {'text': "∆èfsan…ôvi qƒ±lƒ±ncƒ± …ôld…ô etdiniz! Mac…ôranƒ±z uƒüurla ba≈üa √ßatdƒ±. Q…ôl…ôb…ô! üèÜ\n\nYeni mac…ôra √º√ß√ºn /macera yazƒ±n.",'choices': []}}
QUIZ_QUESTIONS = [{'question': 'Az…ôrbaycanƒ±n paytaxtƒ± haradƒ±r?', 'options': ['G…ônc…ô', 'Sumqayƒ±t', 'Bakƒ±', 'Nax√ßƒ±van'], 'correct': 'Bakƒ±'}]
RIDDLES = [{'riddle': 'Aƒüzƒ± var, dili yox, danƒ±≈üdƒ±qca cana g…ôlir. Bu n…ôdir?', 'answers': ['kitab']}]
NORMAL_TRUTH_QUESTIONS = ["U≈üaqlƒ±qda …ôn b√∂y√ºk qorxun n…ô idi?"]
NORMAL_DARE_TASKS = ["Profil ≈ü…ôklini 1 saatlƒ±q qrupdakƒ± …ôn son g√∂nd…ôril…ôn ≈ü…ôkil il…ô d…ôyi≈üdir."]

# ∆èSAS FUNKSƒ∞YALAR
def get_rank_title(count: int) -> str:
    if count <= 100: return "Yeni √úzv üë∂"
    elif count <= 500: return "Daimi Sakin üë®‚Äçüíª"
    elif count <= 1000: return "Qrup S√∂hb…ôt√ßili üó£Ô∏è"
    elif count <= 2500: return "Qrup ∆èfsan…ôsi üëë"
    else: return "S√∂hb…ôt Tanrƒ±sƒ± ‚ö°Ô∏è"
async def welcome_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.new_chat_members: return
    new_members, chat_title = update.message.new_chat_members, update.message.chat.title
    for member in new_members:
        if member.id == context.bot.id: continue
        welcome_message = (f"Salam, [{member.first_name}](tg://user?id={member.id})! üëã\n"
                         f"**'{chat_title}'** qrupuna xo≈ü g…ôlmis…ôn!\n\n"
                         "M…ôn bu qrupun …ôyl…ônc…ô v…ô statistika botuyam. ∆èmrl…ôri g√∂rm…ôk √º√ß√ºn /start yaz.")
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
async def is_user_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if chat_id == user_id: return True
    try: return user_id in [admin.user.id for admin in await context.bot.get_chat_administrators(chat_id)]
    except Exception: return False
async def ask_next_player(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    chat_data = context.chat_data
    if not chat_data.get('player_list'):
        await context.bot.send_message(chat_id, "Oyun√ßu qalmadƒ±. Oyun dayandƒ±rƒ±lƒ±r."); context.chat_data.clear(); return
    chat_data['current_player_index'] = (chat_data.get('current_player_index', -1) + 1) % len(chat_data['player_list'])
    current_player = chat_data['player_list'][chat_data['current_player_index']]
    user_id, first_name = current_player['id'], current_player['name']
    keyboard = [[InlineKeyboardButton("Doƒüruluq ‚úÖ", callback_data=f"game_truth_{user_id}"), InlineKeyboardButton("C…ôsar…ôt üòà", callback_data=f"game_dare_{user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, text=f"Sƒ±ra s…ôn…ô √ßatdƒ±, [{first_name}](tg://user?id={user_id})! Se√ßimini et:", reply_markup=reply_markup, parse_mode='Markdown')

# ∆èsas ∆èmrl…ôr
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    # Mac…ôra oyunu √º√ß√ºn deep-link yoxlamasƒ±
    if context.args and len(context.args) > 0 and context.args[0] == 'macera':
        context.user_data['rpg_inventory'] = set()
        await update.message.reply_text("S…ônin ≈ü…ôxsi mac…ôran ba≈ülayƒ±r! ‚öîÔ∏è")
        await show_rpg_node(update, context, 'start')
        return

    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è Bot Haqqƒ±nda M…ôlumat", callback_data="start_info_about")],
        [InlineKeyboardButton("üìú B√ºt√ºn Qaydalar", callback_data="start_info_qaydalar")],
        [InlineKeyboardButton("üë• Oyun Qrupumuz", url="https://t.me/+0z5V-OvEMmgzZTFi")],
        [InlineKeyboardButton("üë®‚Äçüíª Admin il…ô ∆èlaq…ô", url="https://t.me/tairhv")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    start_text = "Salam! M…ôn Oyun Botuyam. ü§ñ\nA≈üaƒüƒ±dakƒ± menyudan ist…ôdiyin b√∂lm…ôni se√ß:"
    await update.message.reply_text(start_text, reply_markup=reply_markup)

async def private_game_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚õî Bu oyun yalnƒ±z qruplarda oynanƒ±la bil…ôr. Z…ôhm…ôt olmasa, m…ôni bir qrupa …ôlav…ô edib orada yenid…ôn c…ôhd edin.")

async def haqqinda_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ABOUT_TEXT, parse_mode='Markdown')

async def qaydalar_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT, parse_mode='Markdown')

async def macera_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot_username = (await context.bot.get_me()).username
    start_link = f"https://t.me/{bot_username}?start=macera"
    keyboard = [[InlineKeyboardButton("‚öîÔ∏è Mac…ôranƒ± ≈û…ôxsid…ô Ba≈ülat", url=start_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("H…ôr k…ôs √∂z ≈ü…ôxsi mac…ôrasƒ±nƒ± ya≈üaya bil…ôr!\n\nA≈üaƒüƒ±dakƒ± d√ºym…ôy…ô basaraq m…ôniml…ô ≈ü…ôxsi s√∂hb…ôt…ô ba≈üla v…ô √∂z f…ôrdi oyununu oyna:", reply_markup=reply_markup)

async def show_rpg_node(update: Update, context: ContextTypes.DEFAULT_TYPE, node_key: str):
    message = update.message if update.message else update.callback_query.message
    node = STORY_DATA.get(node_key)
    if not node: return
    inventory = context.user_data.get('rpg_inventory', set())
    if node.get('get_item'):
        inventory.add(node.get('get_item'))
        context.user_data['rpg_inventory'] = inventory
    text, choices = node['text'], node['choices']
    keyboard_buttons = []
    for choice in choices:
        if 'requires_item' in choice:
            if choice['requires_item'] in inventory:
                keyboard_buttons.append([InlineKeyboardButton(choice['text'], callback_data=f"rpg_{choice['goto']}")])
        else:
            keyboard_buttons.append([InlineKeyboardButton(choice['text'], callback_data=f"rpg_{choice['goto']}")])
    reply_markup = InlineKeyboardMarkup(keyboard_buttons) if keyboard_buttons else None
    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await message.reply_text(text, reply_markup=reply_markup)

# ... (qalan b√ºt√ºn oyun v…ô reytinq …ômrl…ôri olduƒüu kimi qalƒ±r) ...
# ... (button_handler v…ô handle_message funksiyalarƒ± da …ôvv…ôlki kimidir) ...

def main() -> None:
    run_pre_flight_checks()
    init_db()
    application = Application.builder().token(TOKEN).build()
    
    group_filter = ~filters.ChatType.PRIVATE
    private_filter = filters.ChatType.PRIVATE
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("qaydalar", qaydalar_command))
    application.add_handler(CommandHandler("haqqinda", haqqinda_command))
    
    # Qrup …ômrl…ôri
    game_commands_group = ["oyun", "tapmaca", "viktorina", "reyting", "menim_rutbem", "baslat", "novbeti", "dayandir", "qosul", "cix"]
    for cmd in game_commands_group:
        # Bu …ômrl…ôrin h…ôr birini burada t…ôk-t…ôk …ôlav…ô etm…ôk lazƒ±mdƒ±r
        pass 
    application.add_handler(CommandHandler("macera", macera_command, filters=group_filter))
    
    # ≈û…ôxsi s√∂hb…ôt √º√ß√ºn x…ôb…ôrdarlƒ±q
    game_warning_commands = ["oyun", "tapmaca", "viktorina", "reyting", "menim_rutbem", "baslat", "novbeti", "dayandir", "qosul", "cix"]
    application.add_handler(CommandHandler(game_warning_commands, private_game_warning, filters=private_filter))
    
    #... (qalan handler-l…ôr)

    print("Bot i≈ü…ô d√º≈üd√º...")
    application.run_polling()
if __name__ == '__main__':
    main()
