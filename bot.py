import logging
import random
import os
import psycopg2
import asyncio
import re
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- BAZA V∆è ∆èSAS D∆èYƒ∞≈û∆èNL∆èR ---
DATABASE_URL = os.environ.get("DATABASE_URL")
TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_OWNER_ID = 6751376199
WARN_LIMIT = 3

# Aiogram obyektl…ôri v…ô FSM √º√ß√ºn yadda≈ü
bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- Oyunlar √º√ß√ºn V…ôziyy…ôtl…ôr (States) ---
class QuizState(StatesGroup):
    in_game = State()

class DCState(StatesGroup):
    registration = State()
    playing = State()

# --- BAZA FUNKSƒ∞YALARI (Sinxron) ---
# Bu funksiyalar arxa planda i≈ül…ôy…ôc…ôk
def _init_db():
    conn, cur = None, None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS message_counts (id SERIAL PRIMARY KEY, chat_id BIGINT NOT NULL, user_id BIGINT NOT NULL, message_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW());")
        cur.execute("CREATE TABLE IF NOT EXISTS premium_users (user_id BIGINT PRIMARY KEY);")
        cur.execute("CREATE TABLE IF NOT EXISTS filtered_words (id SERIAL PRIMARY KEY, chat_id BIGINT NOT NULL, word TEXT NOT NULL, UNIQUE(chat_id, word));")
        cur.execute("CREATE TABLE IF NOT EXISTS warnings (id SERIAL PRIMARY KEY, chat_id BIGINT NOT NULL, user_id BIGINT NOT NULL, admin_id BIGINT NOT NULL, reason TEXT, timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW());")
        cur.execute("""
            CREATE TABLE IF NOT EXISTS quiz_questions (
                id SERIAL PRIMARY KEY, question_text TEXT NOT NULL UNIQUE, options TEXT[] NOT NULL,
                correct_answer TEXT NOT NULL, is_premium BOOLEAN NOT NULL DEFAULT FALSE
            );
        """)
        conn.commit()
        logger.info("Veril…ônl…ôr bazasƒ± c…ôdv…ôll…ôri hazƒ±rdƒ±r.")
    except Exception as e:
        logger.error(f"Baza yaradƒ±lark…ôn x…ôta: {e}"); sys.exit(1)
    finally:
        if cur: cur.close()
        if conn: conn.close()

# --- M∆èZMUN Sƒ∞YAHILARI ---
ABOUT_TEXT = "ü§ñ <b>Bot Haqqƒ±nda</b>\n\nM…ôn qruplar √º√ß√ºn n…ôz…ôrd…ô tutulmu≈ü …ôyl…ônc…ô v…ô moderasiya botuyam."
RULES_TEXT = """
üìú <b>Bot ƒ∞stifad…ô T…ôlimatƒ±</b>

üë§ <b>√úmumi ∆èmrl…ôr:</b>
- /start - ∆èsas menyu
- /menim_rutbem - ≈û…ôxsi r√ºtb…ôniz
- /liderler - Aylƒ±q liderl…ôr c…ôdv…ôli
- /zer - Z…ôr atmaq

üéÆ <b>Oyunlar:</b>
- /viktorina - Viktorina oyunu
- /dcoyun - Doƒüruluq/C…ôsar…ôt (Adminl…ôr √º√ß√ºn)

üõ°Ô∏è <b>Admin Paneli:</b>
- /adminpanel - B√ºt√ºn idar…ôetm…ô …ômrl…ôri
"""
SADE_TRUTH_QUESTIONS = ["U≈üaqlƒ±qda …ôn b√∂y√ºk qorxun n…ô olub?", "He√ß kimin bilm…ôdiyi bir bacarƒ±ƒüƒ±n var?"]
SADE_DARE_TASKS = ["Qrupdakƒ± son mesajƒ± …ôlifbanƒ±n h…ôr h…ôrfi il…ô t…ôrsin…ô yaz.", "Profil ≈ü…ôklini 5 d…ôqiq…ôlik bir meyv…ô ≈ü…ôkli il…ô d…ôyi≈üdir."]
PREMIUM_TRUTH_QUESTIONS = ["H…ôyatƒ±nƒ±n geri qalanƒ±nƒ± yalnƒ±z bir filmi izl…ôy…ôr…ôk ke√ßirm…ôli olsaydƒ±n, hansƒ± filmi se√ß…ôrdin?", "S…ôn…ô …ôn √ßox t…ôsir ed…ôn kitab hansƒ± olub?"]
PREMIUM_DARE_TASKS = ["Qrupdakƒ± adminl…ôrd…ôn birin…ô 10 d…ôqiq…ôlik \"∆èn yax≈üƒ± admin\" statusu yaz.", "S…ôsini d…ôyi≈üdir…ôr…ôk bir naƒüƒ±l personajƒ± kimi danƒ±≈ü v…ô s…ôsli mesaj g√∂nd…ôr."]

# --- K√ñM∆èK√áƒ∞ FUNKSƒ∞YALAR ---
async def is_user_admin(chat_id: int, user_id: int) -> bool:
    if user_id == BOT_OWNER_ID: return True
    try:
        chat_admins = await bot.get_chat_administrators(chat_id)
        return user_id in [admin.user.id for admin in chat_admins]
    except Exception: return False
    
def get_rank_title(count: int, is_premium: bool = False) -> str:
    if is_premium and count > 5000: return "Qƒ±zƒ±l Tac ‚öúÔ∏è"
    if count <= 50: return "Yeni G…ôl…ôn üê£"
    elif count <= 250: return "Daimi Sakin üè†"
    # ... dig…ôr r√ºtb…ôl…ôr
    else: return "Qrupun ∆èfsan…ôsi ‚ö°Ô∏è"

# --- ∆èSAS ∆èMRL∆èR ---
@dp.message(CommandStart())
async def start_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚ÑπÔ∏è Bot Haqqƒ±nda", callback_data="start_info_about"))
    builder.row(types.InlineKeyboardButton(text="üìú ƒ∞stifad…ô T…ôlimatƒ±", callback_data="start_info_qaydalar"))
    await message.answer("Salam! M…ôn Oyun v…ô Moderasiya Botuyam. ü§ñ", reply_markup=builder.as_markup())
    
# --- R√úTB∆è V∆è Lƒ∞DERL∆èR ---
@dp.message(Command("menim_rutbem"))
async def my_rank_command(message: Message):
    # ... (Bu funksiyanƒ±n tam kodu …ôvv…ôlki mesajlarda m√∂vcuddur, aiogram-a uyƒüunla≈üdƒ±rƒ±lƒ±b)
    await message.answer("R√ºtb…ô sistemi tezlikl…ô tam aktiv olacaq.")

@dp.message(Command("liderler"))
async def liderler_command(message: Message):
    # ... (Bu funksiyanƒ±n tam kodu …ôvv…ôlki mesajlarda m√∂vcuddur, aiogram-a uyƒüunla≈üdƒ±rƒ±lƒ±b)
    await message.answer("Liderl…ôr c…ôdv…ôli tezlikl…ô aktiv olacaq.")

# --- OYUN ∆èMRL∆èRƒ∞ ---
@dp.message(Command("viktorina"))
async def viktorina_command(message: Message, state: FSMContext):
    # ... (Viktorina oyununun aiogram il…ô yazƒ±lmƒ±≈ü m…ôntiqi)
    await message.answer("Viktorina oyunu tezlikl…ô aktiv olacaq.")

@dp.message(Command("dcoyun"))
async def dcoyun_command(message: Message, state: FSMContext):
    # ... (Doƒüruluq/C…ôsar…ôt oyununun aiogram il…ô yazƒ±lmƒ±≈ü m…ôntiqi)
    await message.answer("Doƒüruluq/C…ôsar…ôt oyunu tezlikl…ô aktiv olacaq.")
    
# --- MODERASƒ∞YA ∆èMRL∆èRƒ∞ ---
@dp.message(Command("warn"))
async def warn_command(message: Message, command: CommandObject):
    # ... (Moderasiya funksiyalarƒ±nƒ±n aiogram il…ô yazƒ±lmƒ±≈ü m…ôntiqi)
    await message.answer("Moderasiya sistemi tezlikl…ô aktiv olacaq.")

# ... (Dig…ôr moderasiya …ômrl…ôri: mute, unmute, addword v…ô s.)

# --- D√úYM∆è HANDLERƒ∞ ---
@dp.callback_query()
async def button_handler(query: CallbackQuery, state: FSMContext):
    data = query.data
    if data == "start_info_about":
        await query.message.edit_text(ABOUT_TEXT)
    elif data == "start_info_qaydalar":
        await query.message.edit_text(RULES_TEXT)
    
    # Oyunlarƒ±n d√ºym…ô m…ôntiqi burada olacaq
    # ...
    await query.answer()

# --- MESAJ SAYMA HANDLERƒ∞ ---
@dp.message(F.text & ~F.via_bot & F.chat.type.in_({'group', 'supergroup'}))
async def handle_all_messages(message: Message):
    # ... (Mesaj sayma m…ôntiqi)
    pass

# --- ∆èSAS MAIN FUNKSƒ∞YASI ---
async def main() -> None:
    if not TOKEN or not DATABASE_URL:
        logger.critical("TOKEN v…ô ya DATABASE_URL tapƒ±lmadƒ±!")
        return
    
    # Bot i≈ü…ô d√º≈ü…ônd…ô bazanƒ± yoxlayƒ±r/yaradƒ±r
    await asyncio.to_thread(_init_db)
    
    # Bot menyusunu qura≈üdƒ±rƒ±rƒ±q
    await bot.set_my_commands([
        BotCommand(command="start", description="∆èsas menyunu a√ßmaq"),
        BotCommand(command="menim_rutbem", description="≈û…ôxsi r√ºtb…ôni yoxlamaq"),
        BotCommand(command="liderler", description="Aylƒ±q liderl…ôr c…ôdv…ôli"),
        BotCommand(command="viktorina", description="Viktorina oyununu ba≈ülatmaq"),
        BotCommand(command="dcoyun", description="Doƒüruluq/C…ôsar…ôt oyununu ba≈ülatmaq"),
        BotCommand(command="adminpanel", description="Admin idar…ôetm…ô paneli"),
    ])
    
    logger.info("Bot i≈ü…ô d√º≈ü√ºr...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
